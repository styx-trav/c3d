//bonuses, sprites
distance between x, y player and xs, ys sprite be sqrt((xs-x)^2 + (ys-y)^2)
	correct and usable
use that distance for sprite size
angle from x, y player and xs, ys sprite be ::
	vector player->sprite(xs-x, ys-y)
	player->angle already in store
	vector angle apparently atan(vectory / vectorx)
	"added" to player angle (?)
		==>approved, vec angle + player angle, to adjust for 2PI->0 overflow

then from there ::	use the angle for the horizontal middle placement (based on fov [PI/2.5] and screen size [WIDTH])
				:: if outside of fov, not visible;
			use the distance for the size of it
				:: (1 / ray.dist) * (WIDTH / 2) type beat


//current events

still needed :: perspective texture display

raycasting !! the dda method, suited to current needs ::

float deltaX : abs(1/cos_angle); --> the distance to next square horizontally
float deltaY : abs(1/sin_angle); --> the distance to next square vertically
	>>correct, works great so far (mini quadrillage)

moving in both directions using regular int x, y for the map check since we move by one square of the map;
first to hit returns infos :: x or y hit, distance calculated by distx.y - delta (mult by 64 for our 64x64 square map);

first step :: checking deltas are correct estimates of when the map changes
	looking good
seconds step :: the insquare calculations, done (initial distx.y)
third step :: while loop and display
		and after hours and hours of looking for dumbass mistakes, here it is !!

//end of current events

future graphics add for Makefile
#%.o: %.c
	#$(CC) $(FLAGS) -I/usr/include -Imlx_linux -O3 -c $< -o $@

#-Lmlx_linux -lmlx_Linux -L/usr/lib -Imlx_linux -lXext -lX11 -lm -lz
